from aiogram.dispatcher.filters import Text
import aiogram.types
import bot
import datetime
import dispatcher
import errors
import handlers.keyboards as keyboards
from bot import user_password


@dispatcher.dp.message_handler(commands=["start", "reg"])
async def start(message: aiogram.types.Message):
    if not bot.BotDB.user_exists(message.from_user.id):
        return await message.bot.send_message(
            message.from_user.id,
            '<b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å!</b>\n'
            '–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞. –ö—Ç–æ –≤—ã?',
            reply_markup=keyboards.StartButtons.keyboard,
        )
    await message.bot.send_message(
        message.from_user.id,
        errors.ALREADY_REGISTERED,
        reply_markup=keyboards.StartButtons1.keyboard,
    )


@dispatcher.dp.message_handler(commands='cancel')
async def cancel(message: aiogram.types.Message):
    bot.user_status.pop(message.from_user.id, None)
    await message.bot.send_message(message.from_user.id, '–í—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏')


@dispatcher.dp.message_handler(commands="mi")
async def timetable_mi(message: aiogram.types.Message):
    await message.bot.send_message(
        message.from_user.id,
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏',
        reply_markup=keyboards.all_command_buttons('allmi'),
    )


@dispatcher.dp.message_handler(commands="help")
async def help_command(message: aiogram.types.Message):
    if bot.BotDB.user_exists(message.from_user.id):
        return await message.bot.send_message(
            message.from_user.id,
            '<i>üìÜ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</i>\n'
            '/today - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n'
            '/next - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞\n'
            '/all - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ª—é–±–æ–π –¥–µ–Ω—å\n'
            '/status - –°—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–∫–∞\n'
            '/th - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥—Ä—É–≥–æ–≥–æ –∫–ª–∞—Å—Å–∞\n'
            '/call - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤\n'
            '/free - –ü–æ–∏—Å–∫ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞\n'
            '\n'
            '<i>üìî –∂—É—Ä–Ω–∞–ª</i>\n'
            '/lycreg - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è\n'
            '/tabel - –ß–µ—Ç–≤–µ—Ä—Ç–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏\n'
            '/grades - –¢–µ–∫—É—â–∏–µ –æ—Ü–µ–Ω–∫–∏\n'
            '/homework - –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è\n'
            '\n'
            '<i>üõ† —Å–µ—Ä–≤–∏—Å</i>\n'
            '/help - –í—ã–∑–≤–∞—Ç—å –¥–∞–Ω–Ω–æ–µ –º–µ–Ω—é\n'
            '/cancel - –ü—Ä–µ—Ä–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é\n'
            '/reg - –ü–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n'
            '/exit - –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç',
            reply_markup=keyboards.keyboard_r(is_autorised=message.from_user.id in user_password),
        )
    await message.bot.send_message(
        message.from_user.id,
        errors.SHOULD_REGISTER,
        reply_markup=keyboards.StartButton.keyboard,
    )


@dispatcher.dp.message_handler(commands="status")
async def lesson_status(message: aiogram.types.Message):
    def convert_minutes(_minutes):
        if 10 < _minutes < 20:
            return f'{_minutes} –º–∏–Ω—É—Ç'
        _last_digit = _minutes % 10
        if _last_digit == 1:
            return f'{_minutes} –º–∏–Ω—É—Ç–∞'
        elif 2 <= _last_digit <= 4:
            return f'{_minutes} –º–∏–Ω—É—Ç—ã'
        return f'{_minutes} –º–∏–Ω—É—Ç'

    def convert_hours(_hours):
        if 10 < _hours < 20:
            return f'{_hours} —á–∞—Å–æ–≤'
        _last_digit = _hours % 10
        if _last_digit == 1:
            return f'{_hours} —á–∞—Å'
        elif 2 <= _last_digit <= 4:
            return f'{_hours} —á–∞—Å–∞'
        return f'{_hours} —á–∞—Å–æ–≤'

    def convert_time(_time):
        if _time < 60:
            return convert_minutes(_time)
        if not (_minutes := _time % 60):
            return convert_hours(_time // 60)
        return f'{convert_hours(_time // 60)} {convert_minutes(_minutes)}'
    
    if not bot.BotDB.user_exists(message.from_user.id):
        return await message.bot.send_message(message.from_user.id, errors.SHOULD_REGISTER)
    current_time = datetime.datetime.today().minute + datetime.datetime.today().hour * 60
    e = '<b>–£—Ä–æ–∫–∏ —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å</b>'
    if current_time <= 915:
        for k, start_lesson in enumerate(
            (540, 580, 590, 630, 645, 685, 700, 740, 755, 795, 815, 855, 875, 915),
            start=1,
        ):
            if 915 >= current_time < start_lesson:
                if k % 2:
                    e = f'–î–æ –Ω–∞—á–∞–ª–∞ {k // 2 + 1} —É—Ä–æ–∫–∞ {convert_time(start_lesson-current_time)}'
                else:
                    e = (
                        f'<b>–°–µ–π—á–∞—Å –∏–¥–µ—Ç {k // 2} —É—Ä–æ–∫</b>\n'
                        f'–î–æ –∫–æ–Ω—Ü–∞ —É—Ä–æ–∫–∞ {convert_time(start_lesson - current_time)}'
                    )
                break
    if datetime.datetime.today().weekday() == 6:
        e = errors.NO_LESSONS
    await message.bot.send_message(message.from_user.id, e, reply_markup=keyboards.CallScheduleButton.keyboard)


@dispatcher.dp.message_handler(commands=["today", "t"])
async def today(message: aiogram.types.Message):
    if bot.BotDB.user_exists(message.from_user.id):
        return await message.bot.send_message(
            message.from_user.id,
            await bot.Json.timetable(message.from_user.id, 0),
        )
    await message.bot.send_message(message.from_user.id, errors.SHOULD_REGISTER)


@dispatcher.dp.message_handler(commands=["next", "n"])
async def next_day(message: aiogram.types.Message):
    if bot.BotDB.user_exists(message.from_user.id):
        return await message.bot.send_message(
            message.from_user.id,
            await bot.Json.timetable(message.from_user.id, -1),
        )
    await message.bot.send_message(message.from_user.id, errors.SHOULD_REGISTER)


@dispatcher.dp.message_handler(commands=["all", "a"])
async def all_days(message: aiogram.types.Message):
    if not bot.BotDB.user_exists(message.from_user.id):
        return await message.bot.send_message(message.from_user.id, errors.SHOULD_REGISTER)
    await message.bot.send_message(
        message.from_user.id,
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏',
        reply_markup=keyboards.all_command_buttons(),
    )


@dispatcher.dp.message_handler(commands=["call", "c"])
async def call_schedule(message: aiogram.types.Message):
    return await message.bot.send_message(
        message.from_user.id,
        '<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤</b>\n'
        '\n'
        '<code>1</code>‚îÉ <code>9:00   9:40</code>\n'
        '<code>2</code>‚îÉ <code>9:50   10:30</code>\n'
        '<code>3</code>‚îÉ <code>10:45  11:25</code>\n'
        '<code>4</code>‚îÉ <code>11:40  12:20</code>\n'
        '<code>5</code>‚îÉ <code>12:35  13:15</code>\n'
        '<code>6</code>‚îÉ <code>13:35  14:15</code>\n'
        '<code>7</code>‚îÉ <code>14:35  15:15</code>'
    )


@dispatcher.dp.message_handler(commands="exit")
async def unreg(message: aiogram.types.Message):
    if bot.BotDB.user_exists(message.from_user.id):
        bot.BotDB.remove_user(message.from_user.id)
        return await message.bot.send_message(
            message.from_user.id,
            '–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω! –í—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤–Ω–æ–≤—å',
            reply_markup=keyboards.StartButton.keyboard,
        )
    await message.bot.send_message(
        message.from_user.id,
        errors.SHOULD_REGISTER,
        reply_markup=keyboards.StartButton.keyboard,
    )


@dispatcher.dp.message_handler(commands=["free", "f"])
async def free_auditories(message: aiogram.types.Message):
    await message.bot.send_message(
        message.from_user.id,
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏',
        reply_markup=keyboards.all_command_buttons('allfr'),
    )


@dispatcher.dp.message_handler(commands=["th"])
async def thcom(message: aiogram.types.Message):
    if bot.BotDB.user_exists(message.from_user.id):
        bot.user_status[message.from_user.id] = 'thcom'
        return await message.bot.send_message(
            message.from_user.id,
            '–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å',
            reply_markup=keyboards.get_forms_keyboard(),
        )
    await message.bot.send_message(
        message.from_user.id,
        errors.SHOULD_REGISTER,
        reply_markup=keyboards.StartButton.keyboard,
    )
